const express = require('express');
const router = express.Router();
const Item = require('../models/Item'); // Import the Item model
const auth = require('../middleware/auth'); // Import the auth middleware
const Monitoring = require('../models/Monitoring'); // Add the Monitoring model

//Variables
const cities = ['Hamburg', 'Berlin', 'Koeln'];

// POST /api/items/addNew
router.post('/addNew', async (req, res) => {
    const { bezeichnung, groesse, anzahl, standort } = req.body;
    console.log(req.body);
    try {
      // Check if the item already exists, based on bezeichnung, groesse, and standort

        const existingItem = await Item.findOne({
            bezeichnung,
            groesse,
            standort,
        });
        if (existingItem) {
            return res.status(400).json({ msg: 'Item already exists' });
        }
  
      // Create a new item
      const newItem = new Item({
        bezeichnung,
        groesse,
        anzahl,
        standort,
      });
  
      // Save the new item to the database
      const savedItem = await newItem.save();
  
      // Create a monitoring log for the new item addition
      const newMonitoringLog = new Monitoring({
        itemId: savedItem._id,
        bezeichnung: savedItem.bezeichnung,
        standort: savedItem.standort,
        anzahl: savedItem.anzahl,
        art: 'zugabe', // 'Zugabe' means addition
        timestamp: new Date(), // Optional: automatically adds the current timestamp
      });
  
      // Save the monitoring log
      await newMonitoringLog.save();
  
      // Return the saved item as the response
      res.json(savedItem);
    } catch (err) {
      console.error(err.message);
      res.status(500).send('Server error');
    }
  });

//PUT /api/items/add
router.put('/add/:id', async (req, res) => {
    const { anzahl } = req.body;

    try {
        const item = await Item.findById(req.params.id);
        if (!item) {
            return res.status(404).json({ msg: 'Item not found' });
        }

        // Add 'anzahl' to the item
        item.anzahl += anzahl;
        await item.save();

        // Log the change to the Monitoring collection
        const logEntry = new Monitoring({
            itemId: item._id,
            bezeichnung: item.bezeichnung,
            groesse: item.groesse,
            standort: item.standort,
            anzahl: anzahl,
            art: 'zugabe' // 'zugabe' for addition
        });

        await logEntry.save();

        res.json(item);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
});
// PUT /api/items/updateMultiple
router.put('/updateMultiple', async (req, res) => {
    const { items, count } = req.body; // Expecting an array of item IDs and the count to add/subtract
    try {
        const updatedItems = [];
        for (let i = 0; i < items.length; i++) {
            const itemId = items[i];
            const item = await Item.findById(itemId);
            if (!item) {
                return res.status(404).json({ msg: `Item with id ${itemId} not found` });
            }

            // Update the item quantity based on the action (add or subtract)
            item.anzahl += count;

            // Ensure that the quantity doesn't go below 0
            if (item.anzahl < 0) {
                item.anzahl = 0;
            }

            // Save the updated item
            await item.save();

            // Log the change to the Monitoring collection
            const logEntry = new Monitoring({
                itemId: item._id,
                bezeichnung: item.bezeichnung,
                groesse: item.groesse,
                standort: item.standort,
                anzahl: count,
                art: count > 0 ? 'zugabe' : 'entnahme', // 'zugabe' for addition, 'entnahme' for removal
                timestamp: new Date(),
            });

            await logEntry.save();

            updatedItems.push(item); // Store the updated item for response
        }

        res.json(updatedItems); // Return all updated items
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
});


// PUT /api/items/remove/:id
router.put('/remove/:id', async (req, res) => {
    const { anzahl } = req.body;

    try {
        const item = await Item.findById(req.params.id);
        if (!item) {
            return res.status(404).json({ msg: 'Item not found' });
        }

        // Subtract 'anzahl' from the item
        item.anzahl -= anzahl;

        // Ensure the 'anzahl' doesn't go below 0
        if (item.anzahl < 0) {
            item.anzahl = 0;
        }

        await item.save();

        // Log the change to the Monitoring collection
        const logEntry = new Monitoring({
            itemId: item._id,
            bezeichnung: item.bezeichnung,
            groesse: item.groesse,
            standort: item.standort,
            anzahl: anzahl,
            art: 'entnahme' // 'entnahme' for removal
        });

        await logEntry.save();

        res.json(item);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
});


// Get all items
router.get('/', async (req, res) => {
  try {
    const items = await Item.find();
    res.json(items);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server error');
  }
});

// Get single Item
router.get('/find/:id', async (req, res) => {
    try {
        const item = await Item.findById(req.params.id);
        if (!item) {
            return res.status(404).json({ msg: 'Item not found' });
        }
        res.json(item);
    } catch (err) {
        console.error(err.message);

        // If the ID is not valid or any error occurs, send a server error response
        if (err.kind === 'ObjectId') {
            return res.status(400).json({ msg: 'Invalid Item ID' });
        }
        res.status(500).send('Server error');
    }
});

// Get Item by Location
router.get('/findByLocation', async (req, res) => {
    try {
        const locationQuery = req.query.locationQuery
        console.log(locationQuery);
        if(!cities.includes(locationQuery)){
            return res.status(400).json({msg: `Location must be one of: ${cities.join(', ')}`});
        }
        const items = await Item.find({ standort: locationQuery});

        //Check if any Items are found
        if(!items.length) {
            return res.status(404).json({ msg: 'No items found in this location' });
        }

        //send
        res.json(items);
    } catch (err) {
        
    }
});
module.exports = router;
